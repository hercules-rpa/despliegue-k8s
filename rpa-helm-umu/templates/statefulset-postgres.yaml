{{- if .Values.postgres.install }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres-rpa
  labels:
    app: postgres-rpa
spec:
  selector:
    matchLabels:
      app: postgres-rpa
  serviceName: "postgres-rpa"
  replicas: {{ .Values.postgres.replicaCount }}
  template:
    metadata:
      labels:
        app: postgres-rpa
    spec:
      containers:
        - name: postgres-rpa
          image: "{{ .Values.postgres.image.repository }}:{{ .Values.postgres.image.tag | default .Chart.AppVersion }}"
          resources:
            requests:
              memory: {{ .Values.postgres.resource.request.memory }}
              cpu: "{{ .Values.postgres.resource.request.cpu }}"
            limits:
              memory: {{ .Values.postgres.resource.limit.memory }}
              cpu: "{{ .Values.postgres.resource.limit.cpu }}"
          imagePullPolicy: {{ .Values.postgres.image.pullpolicy }}
          env:
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.secret.secretName }}
                  key: {{ .Values.secret.usernamePostgresKey }}
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.secret.secretName }}
                  key: {{ .Values.secret.passwordPostgresKey }}
            - name: POSTGRES_DB
              value: $(POSTGRES_USER)
            - name: PGDATA
              value: /var/lib/postgresql/data/pgdata
          readinessProbe:
            exec:
              command:
                - /bin/bash
                - -c
                - PGPASSWORD= $(POSTGRES_PASSWORD)
                - psql -h localhost -U $(POSTGRES_USER)
            initialDelaySeconds: 15
            timeoutSeconds: 2
          livenessProbe:
            exec:
              command:
                - /bin/bash
                - -c
                - PGPASSWORD= $(POSTGRES_PASSWORD)
                - psql -h localhost -U $(POSTGRES_USER)
            initialDelaySeconds: 45
            timeoutSeconds: 2
          ports:
            - containerPort: {{ .Values.postgres.service.tcp.port }}
              name: postgres
              protocol: TCP
          volumeMounts:
            - mountPath: /var/lib/postgresql/data
              name: config-pv
      volumes:
        - name: config-pv
          persistentVolumeClaim:
            claimName: postgres-pv-claim
{{ end }}